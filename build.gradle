/*
 * Copyright Â© 2017-2020  Kynetics  LLC
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */

import java.util.function.BinaryOperator

// Top-level build file where you can add configuration options common to all sub-projects/modules.



buildscript {
    ext{
        kotlin_version = '1.5.0'
    }
    repositories {
        google()
        jcenter()
        mavenLocal()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.1'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "kotlinx-serialization" version "1.5.0" apply true
    id "io.gitlab.arturbosch.detekt" version "1.0.0-RC16"
    id "org.jetbrains.dokka-android" version "0.9.18"

    // ... another plugins
}

apply from: 'gradle/grgit.gradle'

detekt {
    config = files("$rootDir/default-detekt-config.yml", "$rootDir/detekt-config.yml")
    toolVersion = "1.0.0-RC16"
    input = files("$projectDir")
    filters = ".*/resources/.*,.*/build/.*"
}

ext{
    //dependencies
    supportLibraryVersion = '28.0.0'

}

allprojects {
    apply from: "$rootDir/ktlint.gradle"

    repositories {
        google()
        jcenter()
        mavenLocal()
        maven { url 'https://jitpack.io' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task copyClientSideGitHooks(type:Copy, group: "git-hooks"){
    description 'Copies the git hooks from git-hooks to the .git folder.'
    doFirst{
        project.fileTree("git-hooks").visit { FileVisitDetails details ->
            if(details.name.endsWith(".sh")){
                def name = details.name.substring(0, details.name.lastIndexOf(".sh"))
                def file = file("${projectDir}/.git/hooks/${name}")
                if(file.exists()){
                    ant.fail("${file.path} file already exists")
                }
            }

        }
    }
    from("${rootDir}/git-hooks/") {
        include '**/*.sh'
        rename '(.*).sh', '$1'
    }
    into "${rootDir}/.git/hooks"
    outputs.upToDateWhen { false }
}

task installClientSideGitHooks(type: Exec, group: "git-hooks") {
    description 'Installs the client-side git hooks'
    commandLine 'chmod'
    args '-R', '+x', '.git/hooks/'
    dependsOn copyClientSideGitHooks
    doLast {
        println('Git hook installed successfully.')
    }
}

String getBody(url) {
    def connection = new URL(url).openConnection()
    connection.requestMethod = 'GET'
    try {
        if(connection.responseCode == 200 ){
            new BufferedReader(new InputStreamReader(connection.getInputStream()))
                    .lines().reduce(new BinaryOperator<String>() {
                @Override
                String apply(String s, String s2) {
                    println "${s} \n${s2}"
                    return "${s} \n${s2}"
                }
            }).orElse("{}")
        } else if(connection.responseCode == 404 ){
            "\"status\":\"NotFound\""
        } else {
            "{}"
        }
    } catch (IOException error) {
        ""
    }
}

task checkJitpackBuild(){
    group 'Jitpack'

    doLast {
        def url = "https://jitpack.io/api/builds/com.github.Kynetics/uf-android-client/${versionFromGit(project)}"
        def attempts = 10
        def body = "{}"
        while (attempts > 0 && !(body.length() > 5)){
            body = getBody(url)
            if(body.contains("\"status\":\"NotFound\"")){
                body = getBody(url.toLowerCase())
            }
            if(body.length() < 5){
                println "Waiting for ${url}, attempts remaning ${--attempts} ..."
                sleep(30000)
            }
        }

        if(body.contains("\"status\":\"Error\"")){
            throw new IllegalStateException("jitpack build fails!")
        } else if(body.contains("\"status\":\"NotFound\"")){
            throw new IllegalStateException("jitpack build fails! Tag not found")
        } else if(body.contains("\"status\":\"ok\"")){
            println "jitpack build works!"
        } else {
            throw new IllegalStateException("jitpack build timeout!")
        }

    }

}